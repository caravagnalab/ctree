[{"path":"https://caravagnalab.github.io/ctree/articles/ctree.html","id":"required-data","dir":"Articles","previous_headings":"","what":"Required data","title":"ctree","text":"Cancer Cell Fractions Cancer Cell Fractions (CCF) clusters obtained subclonal deconvolution analysis bulk DNA sequencing data required, need tools compute CCF values, evoverse collection packages Cancer Evolution analysis contains MOBSTER VIBER. Otherwise, number packages can used (pyClone, sciClone, DPClust, etc.). Driver events mapped CCF clusters, reported clonality status, variantID patientID. data","code":"ctree_input$CCF_clusters #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0 ctree_input$drivers #> # A tibble: 7 × 8 #>   patientID variantID is.driver is.clonal cluster    R1    R2    R3 #>   <chr>     <chr>     <lgl>     <lgl>     <chr>   <dbl> <dbl> <dbl> #> 1 CRUK0002  RB1       TRUE      FALSE     1        0     0.92  0    #> 2 CRUK0002  IKZF1     TRUE      FALSE     1        0     0.92  0    #> 3 CRUK0002  KRAS      TRUE      FALSE     1        0     0.93  0    #> 4 CRUK0002  MET       TRUE      TRUE      2        0.99  0.98  0.99 #> 5 CRUK0002  TERT      TRUE      TRUE      2        0.99  0.98  0.99 #> 6 CRUK0002  NF1       TRUE      FALSE     5        0.78  0     0    #> 7 CRUK0002  EP300     TRUE      FALSE     6        0.96  0.03  0.98 ctree_input$samples #> [1] \"R1\" \"R2\" \"R3\" ctree_input$patient #> [1] \"CUK12345\""},{"path":"https://caravagnalab.github.io/ctree/articles/ctree.html","id":"creation-of-a-clone-tree","dir":"Articles","previous_headings":"","what":"Creation of a clone tree","title":"ctree","text":"can use sampler control parameters – see ~ctrees. sampler creates number clone trees can fit data according error model allows violations pigeonhole principle. work top-ranking model.","code":"x = ctrees(   CCF_clusters = ctree_input$CCF_clusters,    drivers = ctree_input$drivers,   samples = ctree_input$samples,   patient = ctree_input$patient,   sspace.cutoff = ctree_input$sspace.cutoff,   n.sampling = ctree_input$n.sampling,   store.max = ctree_input$store.max ) #>  [ ctree ~ clone trees generator for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0 #> ✔ Trees per region 1, 3, 1 #> ℹ Total 3 tree structures - search is exahustive #>  #> ── Ranking trees #> ✔ 3  trees with non-zero score, storing 3 x = x[[1]]"},{"path":"https://caravagnalab.github.io/ctree/articles/ctree.html","id":"visualisations","dir":"Articles","previous_headings":"","what":"Visualisations","title":"ctree","text":"S3 functions printing, summarizing object. plotting functions tree. tree layout used display clone tree information transfer, corresponds ordering drivers annnotated tree. terminology borrowed REVOLVER algorithm, used refer set trajectories patient “transfers” another patient fit.    data, can plot CCF clusters.  can plot size CCF cluster barplot. barplot annotated report wether subclone driver significantly larger expected size subclone without driver. carry test subclones without drivers used estimate parameters univariate Gaussian distribution (mean standard deviation), p-value computed fit distribution pnorm function. confidence level test can passed parameter.","code":"print(x) #>  [ ctree - ctree rank 1/3 for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> Tree shape (drivers annotated)   #>  #>   \\-GL #>    \\-2 :: MET, TERT #>     |-1 :: RB1, IKZF1, KRAS #>     | \\-7 #>     \\-6 :: EP300 #>      |-4 #>      | \\-3 #>      \\-5 :: NF1 #>  #> Information transfer   #>  #>    MET ---> RB1  #>    MET ---> IKZF1  #>    MET ---> KRAS  #>    TERT ---> RB1  #>    TERT ---> IKZF1  #>    TERT ---> KRAS  #>    GL ---> MET  #>    GL ---> TERT  #>    EP300 ---> NF1  #>    MET ---> EP300  #>    TERT ---> EP300  #>  #> Tree score 0.6  #> summary(x) #>  [ ctree - ctree rank 1/3 for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> Tree shape (drivers annotated)   #>  #>   \\-GL #>    \\-2 :: MET, TERT #>     |-1 :: RB1, IKZF1, KRAS #>     | \\-7 #>     \\-6 :: EP300 #>      |-4 #>      | \\-3 #>      \\-5 :: NF1 #>  #> Information transfer   #>  #>    MET ---> RB1  #>    MET ---> IKZF1  #>    MET ---> KRAS  #>    TERT ---> RB1  #>    TERT ---> IKZF1  #>    TERT ---> KRAS  #>    GL ---> MET  #>    GL ---> TERT  #>    EP300 ---> NF1  #>    MET ---> EP300  #>    TERT ---> EP300  #>  #> Tree score 0.6  #>  #> CCF clusters:   #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> Drivers:   #>  #> # A tibble: 7 × 8 #>   patientID variantID is.driver is.clonal cluster    R1    R2    R3 #>   <chr>     <chr>     <lgl>     <lgl>     <chr>   <dbl> <dbl> <dbl> #> 1 CRUK0002  RB1       TRUE      FALSE     1        0     0.92  0    #> 2 CRUK0002  IKZF1     TRUE      FALSE     1        0     0.92  0    #> 3 CRUK0002  KRAS      TRUE      FALSE     1        0     0.93  0    #> 4 CRUK0002  MET       TRUE      TRUE      2        0.99  0.98  0.99 #> 5 CRUK0002  TERT      TRUE      TRUE      2        0.99  0.98  0.99 #> 6 CRUK0002  NF1       TRUE      FALSE     5        0.78  0     0    #> 7 CRUK0002  EP300     TRUE      FALSE     6        0.96  0.03  0.98 #>  #> Pigeonhole principle: 12 0  #>  #>     R1   R2   R3 #> 1 TRUE TRUE TRUE #> 2 TRUE TRUE TRUE #> 4 TRUE TRUE TRUE #> 6 TRUE TRUE TRUE #>  #> Goodness-of-fit: 1   #>  #> plot(x) #> Warning: Duplicated aesthetics after name standardisation: na.rm #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = #> \"none\")` instead. #> Warning: Removed 1 rows containing missing values (geom_point). plot_information_transfer(x) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = #> \"none\")` instead. plot_icon(x) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = #> \"none\")` instead. plot_CCF_clusters(x) #> Warning: Removed 8 rows containing missing values (geom_text). plot_clone_size(x) #> Warning: Removed 3 rows containing missing values (geom_text)."},{"path":"https://caravagnalab.github.io/ctree/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giulio Caravagna. Author, maintainer. Luca De Sano. Contributor.","code":""},{"path":"https://caravagnalab.github.io/ctree/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Caravagna G (2022). ctree: ctree - Clone trees cancer evolution. R package version 0.1.2, https://caravagnalab.github.io/ctree/.","code":"@Manual{,   title = {ctree: ctree - Clone trees in cancer evolution},   author = {Giulio Caravagna},   year = {2022},   note = {R package version 0.1.2},   url = {https://caravagnalab.github.io/ctree/}, }"},{"path":"https://caravagnalab.github.io/ctree/index.html","id":"ctree-","dir":"","previous_headings":"","what":"ctree - Clone trees in cancer evolution","title":"ctree - Clone trees in cancer evolution","text":"ctree package implements clones trees cancer evolutionary studies. models built Cancer Cell Franctions (CCFs) clusters computed via tumour subclonal deconvolution, using either one tumour biopsies . can used model evolutionary trajectories bulk sequencing data, especially whole-genome sequencing available. package implements S3 objects mutation trees, well Monte Carlo sampler generate , well functions plot analyze trees. sibling clone tree mutation tree, built binary mutation profiles; refer mtree package mutation trees.","code":""},{"path":"https://caravagnalab.github.io/ctree/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"ctree - Clone trees in cancer evolution","text":"Please cite use ctree: G. Caravagna, Y. Giarratano, D. Ramazzoti, . Tomlinson, T.. Graham, G. Sanguinetti, . Sottoriva. Detecting repeated cancer evolution multi-region tumor sequencing data. Nature Methods 15, 707–714 (2018).","code":""},{"path":[]},{"path":"https://caravagnalab.github.io/ctree/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ctree - Clone trees in cancer evolution","text":"can install released version ctree :","code":"# install.packages(\"devtools\") devtools::install_github(\"caravagnalab/ctree\")"},{"path":"https://caravagnalab.github.io/ctree/index.html","id":"copyright-and-contacts","dir":"","previous_headings":"Installation","what":"Copyright and contacts","title":"ctree - Clone trees in cancer evolution","text":"Giulio Caravagna. Cancer Data Science (CDS) Laboratory.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/ctree.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a `ctree` clone tree with known structure. — ctree","title":"Construct a `ctree` clone tree with known structure. — ctree","text":"constructor creates object class `'ctree'`, represents clone tree.  tree created set clusters computed patient, usually methods carry tumour subclonal deconvolution routines bulk DNA  sequencing data. create tree list drivers can provided annotated input  set CCF clusters. minimum amount information formatting fields required tree construction operate successfully. Please refer package vignette provided input datasets instructions.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/ctree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a `ctree` clone tree with known structure. — ctree","text":"","code":"ctree(   CCF_clusters,   drivers,   samples,   patient,   M,   score,   annotation = paste0(\"Clone tree for patient \", patient) )"},{"path":"https://caravagnalab.github.io/ctree/reference/ctree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a `ctree` clone tree with known structure. — ctree","text":"CCF_clusters Clusters Cancer Cell Fractions available data patient. See package vignette see format specified. drivers list driver events annotated one input clusters contained `CCF_clusters` parameter. See package  vignette see format specified. samples vector samples names (e.g., biopsies sequenced patient). patient string id represent patient. M adjacency matrix defined connect nodes tree. score scalar score can associated tree. annotation string annotation one wants add `ctree`. used plotting functions display `ctree` objects.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/ctree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a `ctree` clone tree with known structure. — ctree","text":"object class \"ctree\" represents tree.","code":""},{"path":[]},{"path":"https://caravagnalab.github.io/ctree/reference/ctree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a `ctree` clone tree with known structure. — ctree","text":"","code":"data('ctree_input')  x = ctrees(    ctree_input$CCF_clusters,    ctree_input$drivers,    ctree_input$samples,    ctree_input$patient,    ctree_input$sspace.cutoff,    ctree_input$n.sampling,    ctree_input$store.max    ) #>  [ ctree ~ clone trees generator for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> ✔ Trees per region 1, 3, 1 #> ℹ Total 3 tree structures - search is exahustive #>  #> ── Ranking trees  #> ✔ 3  trees with non-zero score, storing 3 x = x[[1]]             # Adj matrix inside of the objects, we remove the GL # entry that is added as fake root by ctree M = x$adj_mat M = M[rownames(M) != 'GL', colnames(M) != 'GL']  print(M) #>   2 1 6 4 7 5 3 #> 2 0 1 1 0 0 0 0 #> 1 0 0 0 0 1 0 0 #> 6 0 0 0 1 0 1 0 #> 4 0 0 0 0 0 0 1 #> 7 0 0 0 0 0 0 0 #> 5 0 0 0 0 0 0 0 #> 3 0 0 0 0 0 0 0  # Manual construction y = ctree(    ctree_input$CCF_clusters,    ctree_input$drivers,    ctree_input$samples,    ctree_input$patient,    M,    score = 123456,    annotation = paste0(\"Some clone tree\") )  # The same print(x) #>  [ ctree - ctree rank 1/3 for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> Tree shape (drivers annotated)   #>  #>   \\-GL #>    \\-2 :: MET, TERT #>     |-1 :: RB1, IKZF1, KRAS #>     | \\-7 #>     \\-6 :: EP300 #>      |-4 #>      | \\-3 #>      \\-5 :: NF1 #>  #> Information transfer   #>  #>    MET ---> RB1  #>    MET ---> IKZF1  #>    MET ---> KRAS  #>    TERT ---> RB1  #>    TERT ---> IKZF1  #>    TERT ---> KRAS  #>    GL ---> MET  #>    GL ---> TERT  #>    EP300 ---> NF1  #>    MET ---> EP300  #>    TERT ---> EP300  #>  #> Tree score 0.6  #>  print(y) #>  [ ctree - Some clone tree ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> Tree shape (drivers annotated)   #>  #>   \\-GL #>    \\-2 :: MET, TERT #>     |-1 :: RB1, IKZF1, KRAS #>     | \\-7 #>     \\-6 :: EP300 #>      |-4 #>      | \\-3 #>      \\-5 :: NF1 #>  #> Information transfer   #>  #>    MET ---> RB1  #>    MET ---> IKZF1  #>    MET ---> KRAS  #>    TERT ---> RB1  #>    TERT ---> IKZF1  #>    TERT ---> KRAS  #>    GL ---> MET  #>    GL ---> TERT  #>    EP300 ---> NF1  #>    MET ---> EP300  #>    TERT ---> EP300  #>  #> Tree score 123456  #>"},{"path":"https://caravagnalab.github.io/ctree/reference/ctree_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Example ctree dataset. — ctree_input","title":"Example ctree dataset. — ctree_input","text":"Example ctree dataset.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/ctree_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example ctree dataset. — ctree_input","text":"","code":"data(ctree_input)"},{"path":"https://caravagnalab.github.io/ctree/reference/ctree_input.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example ctree dataset. — ctree_input","text":"list parameters build clone tree,","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/ctree_input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example ctree dataset. — ctree_input","text":"","code":"data(ctree_input) ctree_input #> $CCF_clusters #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> $samples #> [1] \"R1\" \"R2\" \"R3\" #>  #> $drivers #> # A tibble: 7 × 8 #>   patientID variantID is.driver is.clonal cluster    R1    R2    R3 #>   <chr>     <chr>     <lgl>     <lgl>     <chr>   <dbl> <dbl> <dbl> #> 1 CRUK0002  RB1       TRUE      FALSE     1        0     0.92  0    #> 2 CRUK0002  IKZF1     TRUE      FALSE     1        0     0.92  0    #> 3 CRUK0002  KRAS      TRUE      FALSE     1        0     0.93  0    #> 4 CRUK0002  MET       TRUE      TRUE      2        0.99  0.98  0.99 #> 5 CRUK0002  TERT      TRUE      TRUE      2        0.99  0.98  0.99 #> 6 CRUK0002  NF1       TRUE      FALSE     5        0.78  0     0    #> 7 CRUK0002  EP300     TRUE      FALSE     6        0.96  0.03  0.98 #>  #> $sspace.cutoff #> [1] 10000 #>  #> $n.sampling #> [1] 5000 #>  #> $store.max #> [1] 100 #>  #> $patient #> [1] \"CUK12345\" #>"},{"path":"https://caravagnalab.github.io/ctree/reference/ctrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a `ctree` clone tree computing its structure. — ctrees","title":"Construct a `ctree` clone tree computing its structure. — ctrees","text":"constructor creates list objects class `'ctree'`, using sampling strategy determine possible trees fit data. strategy sample trees can controlled, maximum number trees can sampled Monte Carlo procedure actual process can exhausted less number available trees fit data. Note parameters function includes parmeters  function ctree, plus parameters sampler. See   ctree explanation parameters.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/ctrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a `ctree` clone tree computing its structure. — ctrees","text":"","code":"ctrees(   CCF_clusters,   drivers,   samples,   patient,   sspace.cutoff = 10000,   n.sampling = 5000,   store.max = 100 )"},{"path":"https://caravagnalab.github.io/ctree/reference/ctrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a `ctree` clone tree computing its structure. — ctrees","text":"CCF_clusters Clusters Cancer Cell Fractions available data patient. See package vignette see format specified. drivers list driver events annotated one input clusters contained `CCF_clusters` parameter. See package  vignette see format specified. samples vector samples names (e.g., biopsies sequenced patient). patient string id represent patient. sspace.cutoff less number tree available, structures examined exhaustive fashion. Otherwise, , Monte Carlo sampler used. n.sampling Monte Carlo sampler used, n.sampling distinct trees sampled scored. store.max number trees generated, scored ranked, maximum store.max returned user (selected following  ranking).","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/ctrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a `ctree` clone tree computing its structure. — ctrees","text":"list objects class \"ctree\" represent trees  can fit data patient..","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/ctrees.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a `ctree` clone tree computing its structure. — ctrees","text":"","code":"data('ctree_input')  x = ctrees(    ctree_input$CCF_clusters,    ctree_input$drivers,    ctree_input$samples,    ctree_input$patient,    ctree_input$sspace.cutoff,    ctree_input$n.sampling,    ctree_input$store.max    ) #>  [ ctree ~ clone trees generator for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> ✔ Trees per region 1, 3, 1 #> ℹ Total 3 tree structures - search is exahustive #>  #> ── Ranking trees  #> ✔ 3  trees with non-zero score, storing 3     print(x[[1]]) #>  [ ctree - ctree rank 1/3 for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> Tree shape (drivers annotated)   #>  #>   \\-GL #>    \\-2 :: MET, TERT #>     |-1 :: RB1, IKZF1, KRAS #>     | \\-7 #>     \\-6 :: EP300 #>      |-4 #>      | \\-3 #>      \\-5 :: NF1 #>  #> Information transfer   #>  #>    MET ---> RB1  #>    MET ---> IKZF1  #>    MET ---> KRAS  #>    TERT ---> RB1  #>    TERT ---> IKZF1  #>    TERT ---> KRAS  #>    GL ---> MET  #>    GL ---> TERT  #>    EP300 ---> NF1  #>    MET ---> EP300  #>    TERT ---> EP300  #>  #> Tree score 0.6  #>  plot(x[[1]]) #> Warning: Duplicated aesthetics after name standardisation: na.rm #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead. #> Warning: Removed 1 rows containing missing values (geom_point)."},{"path":"https://caravagnalab.github.io/ctree/reference/plot.ctree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a ctree tree. — plot.ctree","title":"Plot a ctree tree. — plot.ctree","text":"S3 method plots ctree tree, using ggraph layout functions. tree annotated coloured node (.e., cluster) contain driver event annotated. driver id also reported via ggrepel annotation functions.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot.ctree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a ctree tree. — plot.ctree","text":"","code":"# S3 method for ctree plot(   x,   node_palette = colorRampPalette(RColorBrewer::brewer.pal(n = 9, \"Set1\")),   tree_layout = \"tree\",   ... )"},{"path":"https://caravagnalab.github.io/ctree/reference/plot.ctree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a ctree tree. — plot.ctree","text":"x ctree tree. node_palette function applied number return set colors. default colorRampPalette applied 9 colours RColorBrewer palette Set1. Colors generated following topological sort information transfer, obtained igraph. tree_layout layout can used tidygraph, wraps igraph's layouts. default `tree` layout. ... Extra S3 parameters","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot.ctree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a ctree tree. — plot.ctree","text":"ggplot plot tree.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot.ctree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a ctree tree. — plot.ctree","text":"","code":"data('ctree_input')  x = ctrees(    ctree_input$CCF_clusters,    ctree_input$drivers,    ctree_input$samples,    ctree_input$patient,    ctree_input$sspace.cutoff,    ctree_input$n.sampling,    ctree_input$store.max    ) #>  [ ctree ~ clone trees generator for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> ✔ Trees per region 1, 3, 1 #> ℹ Total 3 tree structures - search is exahustive #>  #> ── Ranking trees  #> ✔ 3  trees with non-zero score, storing 3     plot(x[[1]]) #> Warning: Duplicated aesthetics after name standardisation: na.rm #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead. #> Warning: Removed 1 rows containing missing values (geom_point)."},{"path":"https://caravagnalab.github.io/ctree/reference/plot_CCF_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot CCF clusters data (tile). — plot_CCF_clusters","title":"Plot CCF clusters data (tile). — plot_CCF_clusters","text":"function creates ggplot-style heatmap input CCF cluster clone data. heatmap annotated drivers status clone (/ without driver). CCF values used colour heatmap (`NA` values light gray).","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_CCF_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot CCF clusters data (tile). — plot_CCF_clusters","text":"","code":"plot_CCF_clusters(x, ...)"},{"path":"https://caravagnalab.github.io/ctree/reference/plot_CCF_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot CCF clusters data (tile). — plot_CCF_clusters","text":"x ctree tree. ... Extra parameters, used.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_CCF_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot CCF clusters data (tile). — plot_CCF_clusters","text":"ggplot plot.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_CCF_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot CCF clusters data (tile). — plot_CCF_clusters","text":"","code":"data(ctree_input)  x = ctrees( ctree_input$CCF_clusters,  ctree_input$drivers, ctree_input$samples, ctree_input$patient, ctree_input$sspace.cutoff, ctree_input$n.sampling, ctree_input$store.max ) #>  [ ctree ~ clone trees generator for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> ✔ Trees per region 1, 3, 1 #> ℹ Total 3 tree structures - search is exahustive #>  #> ── Ranking trees  #> ✔ 3  trees with non-zero score, storing 3  plot_CCF_clusters(x[[1]]) #> Warning: Removed 8 rows containing missing values (geom_text)."},{"path":"https://caravagnalab.github.io/ctree/reference/plot_clone_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a clone size histogram, and test for. — plot_clone_size","title":"Plot a clone size histogram, and test for. — plot_clone_size","text":"function creates ggplot barplot clone size values foe clone patient's data. size clone defined number mutations assigned  , provided input. barplot annotated report wether subclone driver significantly larger expected size subclone without driver. carry test subclones without drivers used estimate parameters univariate Gaussian distribution (mean standard deviation), p-value computed fit distribution `pnorm` function. confidence level test can passed parameter.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_clone_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a clone size histogram, and test for. — plot_clone_size","text":"","code":"plot_clone_size(x, alpha_level = 0.05)"},{"path":"https://caravagnalab.github.io/ctree/reference/plot_clone_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a clone size histogram, and test for. — plot_clone_size","text":"x ctree tree. alpha_level Alpha level test, default 0.05.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_clone_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a clone size histogram, and test for. — plot_clone_size","text":"ggplot plot.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_clone_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a clone size histogram, and test for. — plot_clone_size","text":"","code":"data('ctree_input')  x = ctrees(    ctree_input$CCF_clusters,    ctree_input$drivers,    ctree_input$samples,    ctree_input$patient,    ctree_input$sspace.cutoff,    ctree_input$n.sampling,    ctree_input$store.max    ) #>  [ ctree ~ clone trees generator for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> ✔ Trees per region 1, 3, 1 #> ℹ Total 3 tree structures - search is exahustive #>  #> ── Ranking trees  #> ✔ 3  trees with non-zero score, storing 3     plot_clone_size(x[[1]]) #> Warning: Removed 3 rows containing missing values (geom_text)."},{"path":"https://caravagnalab.github.io/ctree/reference/plot_icon.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the information transfe among clones in icon format (tiny). — plot_icon","title":"Plot the information transfe among clones in icon format (tiny). — plot_icon","text":"information transfer tree set orderings associated internal annotated driver events. function plots clones drivers (orderings) following topological sort node corresponding clone tree, tiny icon format. graohics changes respect ot standard plot.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_icon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the information transfe among clones in icon format (tiny). — plot_icon","text":"","code":"plot_icon(   x,   node_palette = colorRampPalette(RColorBrewer::brewer.pal(n = 9, \"Set1\")),   ... )"},{"path":"https://caravagnalab.github.io/ctree/reference/plot_icon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the information transfe among clones in icon format (tiny). — plot_icon","text":"x ctree tree. node_palette function can return, input number, number colours. ... parameters, used case.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_icon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the information transfe among clones in icon format (tiny). — plot_icon","text":"ggplot object plot.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_icon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the information transfe among clones in icon format (tiny). — plot_icon","text":"","code":"data(ctree_input)  x = ctrees( ctree_input$CCF_clusters,  ctree_input$drivers, ctree_input$samples, ctree_input$patient, ctree_input$sspace.cutoff, ctree_input$n.sampling, ctree_input$store.max ) #>  [ ctree ~ clone trees generator for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> ✔ Trees per region 1, 3, 1 #> ℹ Total 3 tree structures - search is exahustive #>  #> ── Ranking trees  #> ✔ 3  trees with non-zero score, storing 3  plot_icon(x[[1]]) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead."},{"path":"https://caravagnalab.github.io/ctree/reference/plot_information_transfer.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the information transfer of a tree (drivers ordering). — plot_information_transfer","title":"Plot the information transfer of a tree (drivers ordering). — plot_information_transfer","text":"information transfer tree set orderings associated internal annotated driver events. function plots orderings following topological sort node corresponding clone tree.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_information_transfer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the information transfer of a tree (drivers ordering). — plot_information_transfer","text":"","code":"plot_information_transfer(   x,   node_palette = colorRampPalette(RColorBrewer::brewer.pal(n = 9, \"Set1\")),   tree_layout = \"tree\",   ... )"},{"path":"https://caravagnalab.github.io/ctree/reference/plot_information_transfer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the information transfer of a tree (drivers ordering). — plot_information_transfer","text":"x ctree tree. node_palette function can return, input number, number colours. tree_layout Layout model, ggraph. ... parameters, used case.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_information_transfer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the information transfer of a tree (drivers ordering). — plot_information_transfer","text":"ggplot object plot.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/plot_information_transfer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the information transfer of a tree (drivers ordering). — plot_information_transfer","text":"","code":"data(ctree_input)  x = ctrees( ctree_input$CCF_clusters,  ctree_input$drivers, ctree_input$samples, ctree_input$patient, ctree_input$sspace.cutoff, ctree_input$n.sampling, ctree_input$store.max ) #>  [ ctree ~ clone trees generator for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> ✔ Trees per region 1, 3, 1 #> ℹ Total 3 tree structures - search is exahustive #>  #> ── Ranking trees  #> ✔ 3  trees with non-zero score, storing 3  plot_information_transfer(x[[1]]) #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead.   # Change layout -- use igraph's \"kk\" layout plot_information_transfer(x[[1]], tree_layout = 'kk') #> Warning: `guides(<scale> = FALSE)` is deprecated. Please use `guides(<scale> = \"none\")` instead."},{"path":"https://caravagnalab.github.io/ctree/reference/print.ctree.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a ctree tree. — print.ctree","title":"Print a ctree tree. — print.ctree","text":"Print ctree tree.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/print.ctree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a ctree tree. — print.ctree","text":"","code":"# S3 method for ctree print(x, ...)"},{"path":"https://caravagnalab.github.io/ctree/reference/print.ctree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a ctree tree. — print.ctree","text":"x ctree tree. ... Extra S3 parameters","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/print.ctree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a ctree tree. — print.ctree","text":"Nothing","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/print.ctree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a ctree tree. — print.ctree","text":"Print summary ctree object, includes shell-frinedly layout information.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/print.ctree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a ctree tree. — print.ctree","text":"","code":"data(ctree_input)  x = ctrees( ctree_input$CCF_clusters,  ctree_input$drivers, ctree_input$samples, ctree_input$patient, ctree_input$sspace.cutoff, ctree_input$n.sampling, ctree_input$store.max ) #>  [ ctree ~ clone trees generator for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> ✔ Trees per region 1, 3, 1 #> ℹ Total 3 tree structures - search is exahustive #>  #> ── Ranking trees  #> ✔ 3  trees with non-zero score, storing 3  print(x[[1]]) #>  [ ctree - ctree rank 1/3 for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> Tree shape (drivers annotated)   #>  #>   \\-GL #>    \\-2 :: MET, TERT #>     |-1 :: RB1, IKZF1, KRAS #>     | \\-7 #>     \\-6 :: EP300 #>      |-4 #>      | \\-3 #>      \\-5 :: NF1 #>  #> Information transfer   #>  #>    MET ---> RB1  #>    MET ---> IKZF1  #>    MET ---> KRAS  #>    TERT ---> RB1  #>    TERT ---> IKZF1  #>    TERT ---> KRAS  #>    GL ---> MET  #>    GL ---> TERT  #>    EP300 ---> NF1  #>    MET ---> EP300  #>    TERT ---> EP300  #>  #> Tree score 0.6  #>"},{"path":"https://caravagnalab.github.io/ctree/reference/summary.ctree.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a ","title":"Summary of a ","text":"Reports summary statistics \"rev_phylo\" object,  bit just using print.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/summary.ctree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a ","text":"","code":"# S3 method for ctree summary(object, ...)"},{"path":"https://caravagnalab.github.io/ctree/reference/summary.ctree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a ","text":"object ctree tree. ... Extra parameters","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/summary.ctree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of a ","text":"None.","code":""},{"path":"https://caravagnalab.github.io/ctree/reference/summary.ctree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of a ","text":"","code":"data(ctree_input)  x = ctrees( ctree_input$CCF_clusters,  ctree_input$drivers, ctree_input$samples, ctree_input$patient, ctree_input$sspace.cutoff, ctree_input$n.sampling, ctree_input$store.max ) #>  [ ctree ~ clone trees generator for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> ✔ Trees per region 1, 3, 1 #> ℹ Total 3 tree structures - search is exahustive #>  #> ── Ranking trees  #> ✔ 3  trees with non-zero score, storing 3  summary(x[[1]]) #>  [ ctree - ctree rank 1/3 for CUK12345 ]  #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> Tree shape (drivers annotated)   #>  #>   \\-GL #>    \\-2 :: MET, TERT #>     |-1 :: RB1, IKZF1, KRAS #>     | \\-7 #>     \\-6 :: EP300 #>      |-4 #>      | \\-3 #>      \\-5 :: NF1 #>  #> Information transfer   #>  #>    MET ---> RB1  #>    MET ---> IKZF1  #>    MET ---> KRAS  #>    TERT ---> RB1  #>    TERT ---> IKZF1  #>    TERT ---> KRAS  #>    GL ---> MET  #>    GL ---> TERT  #>    EP300 ---> NF1  #>    MET ---> EP300  #>    TERT ---> EP300  #>  #> Tree score 0.6  #>  #> CCF clusters:   #>  #> # A tibble: 7 × 7 #>   cluster nMuts is.driver is.clonal    R1    R2    R3 #>   <chr>   <int> <lgl>     <lgl>     <dbl> <dbl> <dbl> #> 1 1          72 TRUE      FALSE      0     0.92  0    #> 2 2          69 TRUE      TRUE       0.99  0.98  0.99 #> 3 3          48 FALSE     FALSE      0     0     0.49 #> 4 4          29 FALSE     FALSE      0.01  0.01  0.93 #> 5 5          24 TRUE      FALSE      0.78  0     0    #> 6 6          23 TRUE      FALSE      0.98  0.03  0.98 #> 7 7          15 FALSE     FALSE      0     0.41  0    #>  #> Drivers:   #>  #> # A tibble: 7 × 8 #>   patientID variantID is.driver is.clonal cluster    R1    R2    R3 #>   <chr>     <chr>     <lgl>     <lgl>     <chr>   <dbl> <dbl> <dbl> #> 1 CRUK0002  RB1       TRUE      FALSE     1        0     0.92  0    #> 2 CRUK0002  IKZF1     TRUE      FALSE     1        0     0.92  0    #> 3 CRUK0002  KRAS      TRUE      FALSE     1        0     0.93  0    #> 4 CRUK0002  MET       TRUE      TRUE      2        0.99  0.98  0.99 #> 5 CRUK0002  TERT      TRUE      TRUE      2        0.99  0.98  0.99 #> 6 CRUK0002  NF1       TRUE      FALSE     5        0.78  0     0    #> 7 CRUK0002  EP300     TRUE      FALSE     6        0.96  0.03  0.98 #>  #> Pigeonhole principle: 12 0  #>  #>     R1   R2   R3 #> 1 TRUE TRUE TRUE #> 2 TRUE TRUE TRUE #> 4 TRUE TRUE TRUE #> 6 TRUE TRUE TRUE #>  #> Goodness-of-fit: 1   #>  #>"}]
